<Window x:Class="Player.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:local="clr-namespace:Player"
        xmlns:m="clr-namespace:Player"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        Title="Плеер"
        Width="850"
        Height="450"
        MinWidth="680"
        d:DataContext="{d:DesignInstance Type=local:MainWindowViewModel,
                                         IsDesignTimeCreatable=True}"
        Closing="Window_Closing"
        mc:Ignorable="d">
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />
        <local:IsEqualConverter x:Key="isEqualConverter" />
        <local:IsNotEqualConverter x:Key="isNotEqualConverter" />
        <local:TernaryConverter x:Key="TernaryConverter" />
        <local:VisibleIfConverter x:Key="visibleIfConverter" />
        <local:InvertBoolConverter x:Key="invertBoolConverter" />
        <local:ExtractFileNameConverter x:Key="extractFileNameConverter" />

        <ContextMenu x:Key="AccountCMenu">
            <MenuItem Header="{Binding Login}" IsHitTestVisible="False" Visibility="{Binding IsAuthorized, Converter={StaticResource booleanToVisibilityConverter}}">
                <MenuItem.Icon>
                    <Run FontFamily="Segoe MDL2 Assets" FontSize="16" Text="&#xE77B;" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem IsHitTestVisible="False" Visibility="{Binding IsAuthorized, Converter={StaticResource booleanToVisibilityConverter}}">
                <MenuItem.Header>
                    <MultiBinding Converter="{StaticResource TernaryConverter}">
                        <Binding Path="IsPro" UpdateSourceTrigger="PropertyChanged" />
                        <Binding Source="Подписка активирована" />
                        <Binding Source="Подписка не активирована" />
                    </MultiBinding>
                </MenuItem.Header>
                <MenuItem.Icon>
                    <Run FontFamily="Segoe MDL2 Assets" FontSize="16" Text="&#xE734;" />
                </MenuItem.Icon>
            </MenuItem>
            <Separator />

            <MenuItem x:Name="AuthMI"
                      Click="AuthMI_Click"
                      Header="Вход"
                      Tag="{Binding IsAuthorized, Converter={StaticResource isEqualConverter}, ConverterParameter={m:Bool false}}"
                      Visibility="{Binding Tag, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource booleanToVisibilityConverter}}">
                <MenuItem.Icon>
                    <Run FontFamily="Segoe MDL2 Assets" FontSize="16" Text="&#xF081;" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem x:Name="RegMI"
                      Click="RegMI_Click"
                      Header="Регистрация"
                      Tag="{Binding IsAuthorized, Converter={StaticResource isEqualConverter}, ConverterParameter={m:Bool false}}"
                      Visibility="{Binding Tag, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource booleanToVisibilityConverter}}">
                <MenuItem.Icon>
                    <Run FontFamily="Segoe MDL2 Assets" FontSize="16" Text="&#xE8FA;" />
                </MenuItem.Icon>
            </MenuItem>

            <MenuItem x:Name="BuyProMI" Click="BuyProMI_Click" Header="Купить Pro версию">
                <MenuItem.Visibility>
                    <MultiBinding Converter="{StaticResource visibleIfConverter}">
                        <Binding Path="IsAuthorized" />
                        <Binding Converter="{StaticResource invertBoolConverter}" Path="IsPro" />
                    </MultiBinding>
                </MenuItem.Visibility>
            </MenuItem>

            <MenuItem x:Name="ChangePassMI"
                      Click="ChangePassMI_Click"
                      Header="Изменить пароль"
                      Visibility="{Binding IsAuthorized, Converter={StaticResource booleanToVisibilityConverter}}">
                <MenuItem.Icon>
                    <Run BaselineAlignment="Center"
                         FontFamily="Segoe MDL2 Assets"
                         FontSize="16"
                         Text="&#xEF58;" />
                </MenuItem.Icon>
            </MenuItem>

            <MenuItem x:Name="LogoutMI"
                      Click="LogoutMI_Click"
                      Header="Выход"
                      Visibility="{Binding IsAuthorized, Converter={StaticResource booleanToVisibilityConverter}}">
                <MenuItem.Icon>
                    <Run BaselineAlignment="Center"
                         FontFamily="Segoe MDL2 Assets"
                         FontSize="16"
                         Text="&#xF3B1;" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>

        <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1a888888" />
        <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#A8719EB3" />
        <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3DBABABA" />
        <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="Gray" />
        <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#30BABABA" />
        <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="Gray" />
        <Style x:Key="RemovableListBoxItemContainerStyle" TargetType="{x:Type ListBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="Bd"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="Background" Value="{StaticResource Item.MouseOver.Background}" />
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Item.MouseOver.Border}" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="True" />
                                    <Condition Property="IsSelected" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="Background" Value="{StaticResource Item.SelectedActive.Background}" />
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Item.SelectedActive.Border}" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="False" />
                                    <Condition Property="IsSelected" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Bd" Property="Background" Value="{StaticResource Item.SelectedInactive.Background}" />
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Item.SelectedInactive.Border}" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2"
                                   SnapsToDevicePixels="true"
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="Transparent" />
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070" />
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#1777" />
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1" />
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#2777" />
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B" />
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" />
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5" />
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" />
        <Style x:Key="IconButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}" />
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Focusable="False"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource Button.MouseOver.Background}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Button.MouseOver.Border}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource Button.Pressed.Background}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Button.Pressed.Border}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource Button.Disabled.Background}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Button.Disabled.Border}" />
                                <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource Button.Disabled.Foreground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition />
            <RowDefinition Height="auto" />
        </Grid.RowDefinitions>

        <Grid x:Name="VideoView"
              Grid.RowSpan="2"
              Panel.ZIndex="1"
              Background="Black"
              Visibility="Collapsed">

            <Button x:Name="CloseVideoViewBtn"
                    Width="40"
                    Height="40"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    d:Visibility="Visible"
                    Background="Transparent"
                    Click="CloseVideoViewBtn_Click"
                    Content="X"
                    FontSize="30"
                    Foreground="White"
                    Visibility="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=IsMouseOver, Converter={StaticResource booleanToVisibilityConverter}}" />

            <MediaElement x:Name="media" LoadedBehavior="Manual" />
        </Grid>

        <DockPanel Margin="2px" VerticalAlignment="Top">
            <Button x:Name="AccountBtn"
                    DockPanel.Dock="Right"
                    Padding="4"
                    Click="AccountBtn_Click"
                    Content="&#xE77B;"
                    FontFamily="Segoe MDL2 Assets"
                    FontSize="22"
                    Style="{DynamicResource IconButtonStyle}" />

            <Button x:Name="ExpandVideo"
                    DockPanel.Dock="Left"
                    Padding="4"
                    Click="ExpandVideo_Click"
                    Content="&#xE944;"
                    FontFamily="Segoe MDL2 Assets"
                    FontSize="18"
                    Style="{DynamicResource IconButtonStyle}"
                    Visibility="Hidden" />

            <TextBlock HorizontalAlignment="Center" FontSize="24" Text="Плейлисты" />
        </DockPanel>
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="0,35*" />
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="0,65*" />
            </Grid.ColumnDefinitions>

            <DockPanel>
                <Button DockPanel.Dock="Bottom" Command="{Binding AddPlaylistCommand}" Content="Добавить" />
                <ListBox x:Name="PlaylistsLB"
                         Margin="0 0 0 4"
                         HorizontalContentAlignment="Stretch"
                         ItemContainerStyle="{DynamicResource RemovableListBoxItemContainerStyle}"
                         ItemsSource="{Binding Playlists}"
                         ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                         SelectedItem="{Binding CurrentPlaylist}">
                    <ListBox.ItemTemplate>
                        <DataTemplate DataType="{x:Type local:Playlist}">
                            <Grid x:Name="TGrid" Margin="1px">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="auto" />
                                </Grid.ColumnDefinitions>
                                <local:DoubleClickEditableTextBox Margin="3 2 4 2"
                                                                  FontSize="14px"
                                                                  Text="{Binding Name}"
                                                                  TextWrapping="Wrap" />
                                <Button x:Name="TDelBtn"
                                        Grid.Column="1"
                                        Background="Transparent"
                                        BorderBrush="Transparent"
                                        Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=DataContext.DeletePlaylistCommand}"
                                        CommandParameter="{Binding}"
                                        Content="&#xE8BB;"
                                        FontFamily="Segoe MDL2 Assets"
                                        Foreground="#3591E2">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Button}">
                                                        <Border x:Name="TBorder"
                                                                Padding="1px"
                                                                Background="{TemplateBinding Background}"
                                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                                BorderThickness="1">
                                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter TargetName="TBorder" Property="Button.Foreground" Value="Red" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Button.Style>
                                </Button>
                                <Grid.Style>
                                    <Style TargetType="Grid">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=TDelBtn, Path=IsPressed}" Value="true">
                                                <Setter Property="Background" Value="#12FF0000" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>
                            </Grid>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </DockPanel>
            <GridSplitter Grid.Column="1" Width="2" VerticalAlignment="Stretch" />
            <DockPanel Grid.Column="2">
                <Button DockPanel.Dock="Bottom"
                        Command="{Binding AddPlaylistItemCommand}"
                        Content="Добавить"
                        IsEnabled="{Binding CurrentPlaylist, Converter={StaticResource isNotEqualConverter}, ConverterParameter={x:Null}}" />

                <ListBox x:Name="PlaylistLB"
                         Margin="0 0 0 4"
                         HorizontalContentAlignment="Stretch"
                         AllowDrop="{Binding CurrentPlaylist, Converter={StaticResource isNotEqualConverter}, ConverterParameter={x:Null}}"
                         Drop="PlaylistLB_Drop"
                         ItemContainerStyle="{DynamicResource RemovableListBoxItemContainerStyle}"
                         ItemsSource="{Binding Path=CurrentPlaylist.Items}"
                         ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                         SelectionChanged="PlaylistLB_SelectionChanged">
                    <ListBox.ItemTemplate>
                        <DataTemplate DataType="{x:Type local:Playlist}">
                            <Grid x:Name="TGrid" Margin="1px">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="auto" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Margin="3 2 4 2"
                                           FontSize="14px"
                                           Text="{Binding Path=., Converter={StaticResource extractFileNameConverter}}"
                                           TextWrapping="Wrap" />
                                <Button x:Name="TDelBtn"
                                        Grid.Column="1"
                                        Background="Transparent"
                                        BorderBrush="Transparent"
                                        Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=DataContext.DeletePlaylistItemCommand}"
                                        CommandParameter="{Binding}"
                                        Content="&#xE8BB;"
                                        FontFamily="Segoe MDL2 Assets"
                                        Foreground="#3591E2">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Button}">
                                                        <Border x:Name="TBorder"
                                                                Padding="1px"
                                                                Background="{TemplateBinding Background}"
                                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                                BorderThickness="1">
                                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter TargetName="TBorder" Property="Button.Foreground" Value="Red" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Button.Style>
                                </Button>
                                <Grid.Style>
                                    <Style TargetType="Grid">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ElementName=TDelBtn, Path=IsPressed}" Value="true">
                                                <Setter Property="Background" Value="#12FF0000" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>
                            </Grid>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </DockPanel>
        </Grid>

        <local:ControlBar x:Name="MediaControlBar"
                          Grid.Row="2"
                          Media="{Binding ElementName=media}"
                          RewindButtonsVisibility="{Binding IsPro}" />
    </Grid>
</Window>
